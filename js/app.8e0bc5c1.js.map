{"version":3,"sources":["webpack:///./src/components/animation/graph.js","webpack:///./src/util/ALGraph.js","webpack:///./src/util/localData.js","webpack:///src/components/animation/index.vue","webpack:///./src/components/animation/index.vue?d82d","webpack:///./src/components/animation/index.vue","webpack:///src/components/toolbar/index.vue","webpack:///./src/components/toolbar/index.vue?2614","webpack:///./src/components/toolbar/index.vue","webpack:///src/App.vue","webpack:///./src/App.vue?33fe","webpack:///./src/App.vue","webpack:///./src/main.js","webpack:///./src/data/edges.json","webpack:///./src/data/nodes.json"],"names":["requestAnimationFrame","window","webkitRequestAnimationFrame","mozRequestAnimationFrame","callback","setTimeout","_default","nodes","edges","message","classCallCheck_default","this","container","width","jquery_default","height","init","forEach","edge","i","len","length","name","source","target","nodes_data","edges_data","force","d3_default","a","layout","links","size","linkDistance","data","dist","friction","charge","start","svg","select","append","attr","svg_edges","selectAll","svg_nodes","svg_nodes_texts","svg_edges_texts","updateEdge","updateNode","tick","_this","enter","exit","remove","r","node","popularity","style","fill","stroke","on","event","defaultPrevented","desc","call","drag","dy","text-anchor","x","tspan","y","text","d","_this2","stroke-width","id","concat","pointer-events","dx","radius","push","_this3","transform","svg_path_texts","isVisited","path","Infinity","index","removed","splice","unshift","begin","end","beginNode","endNode","parseInt","count","_this4","traversalAnimation","_this5","traversalAnimation2","_this6","transition","duration","ease","line","_this7","dataIndex","selected","_this8","item","_this9","_this10","ALGraph_ALGraph","ALGraph","nodeArr","map","edgeCount","pEdge","nextNodeName","some","distance","pNext","bIndex","eIndex","description","arr","getNodeIndex","bName","eName","insertEdge","deleteEdge","res","DFSTraverse","beginName","resetNodes","queue","idx","shift","BFSTraverse","unselected","getNodeName","min","vset","j","sort","edge1","edge2","sn1","sn2","haveAllNodesVisited","e","slice","node1","node2","keyword","indexOf","replace","RegExp","localData_readData","localStorage","getItem","current","JSON","parse","default","nodes_default","edges_default","saveData","setItem","stringify","components_animation","_this$alGraph$getData","alGraph","getData","_data$default","g","$message","drawing","graph","resetStyle","options","handleMenu","cur","outputKruskal","outputPrim","animation_render","_vm","_h","$createElement","_c","_self","attrs","staticRenderFns","injectStyle","context","__webpack_require__","__vue_template_functional__","__vue_styles__","__vue_scopeId__","__vue_module_identifier__","Component","Object","component_normalizer","src_components_animation","toolbar","kruskalByParent","primByParent","toolbar_render","staticClass","icon","click","_v","class","toolbar-menu-show","isShow","accordion","model","value","$$v","activeName","expression","title","placeholder","$set","addNode","deleteNode","addEdge","traversal","dfsTraversal","bfsTraversal","shortestPath","dijkstra","kruskal","toolbar_staticRenderFns","toolbar_injectStyle","toolbar___vue_template_functional__","toolbar___vue_styles__","toolbar___vue_scopeId__","toolbar___vue_module_identifier__","toolbar_Component","components_toolbar","App","Animation","Toolbar","empty","prim","App_render","ref","addNodeByParent","deleteNodeByParent","addEdgeByParent","deleteEdgeByParent","traversalByParent","dijkstraByParent","App_staticRenderFns","App_injectStyle","App___vue_template_functional__","App___vue_styles__","App___vue_scopeId__","App___vue_module_identifier__","App_Component","src_App","vue_runtime_esm","config","productionTip","use","element_ui_common_default","render","h","$mount","module","exports"],"mappings":"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","file":"js/app.8e0bc5c1.js","sourcesContent":["import $ from 'jquery';\nimport d3 from 'd3';\n\nconst requestAnimationFrame = (function () {\n    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {\n        window.setTimeout(callback, 1000 / 60);\n    };\n})();\n\nexport default class {\n    constructor(nodes, edges, message) {\n        this.container = '#animation';\n        this.width = $(this.container).width();\n        this.height = $(this.container).height();\n        this.init(nodes, edges);\n        this.message = message;\n    }\n    init(nodes, edges) {\n        edges.forEach((edge) => {\n            for (let i = 0, len = nodes.length; i < len; i++) {\n                if (nodes[i].name === edge.source) {\n                    edge.source = nodes[i];\n                }\n                if(nodes[i].name === edge.target) {\n                    edge.target = nodes[i];\n                }\n            }\n        });\n        this.nodes_data = nodes;\n        this.edges_data = edges;\n        const force = d3.layout.force()\n                                .nodes(this.nodes_data)\n                                .links(this.edges_data)\n                                .size([this.width, this.height])\n                                .linkDistance((data) => {\n                                    return data.dist * 25;\n                                })\n                                .friction(0.8)\n\t\t\t\t\t\t\t\t.charge(-3000);\n        force.start();\n        this.force = force;\n    }\n    drawing() {\n        const svg = d3.select(this.container)\n                        .append('svg')\n                        .attr('width', this.width)\n                        .attr('height', this.height);\n        this.svg_edges       = svg.append('g').attr('id', 'svg_edges')\n                                               .selectAll('path').data(this.force.links());\n        this.svg_nodes       = svg.append('g').attr('id', 'svg_nodes')\n                                               .selectAll('circle').data(this.force.nodes());\n        this.svg_nodes_texts = svg.append('g').attr('id', 'svg_nodes_texts')\n                                               .selectAll('text').data(this.force.nodes());\n        this.svg_edges_texts = svg.append('g').attr('id', 'svg_edges_texts')\n                                                .selectAll('text')\n                                                .data(this.force.links());\n        this.updateEdge();\n        this.updateNode();\n        this.svg = svg;\n        this.tick();\n    }\n    updateNode() {\n        this.svg_nodes.enter().append('circle');\n        this.svg_nodes.exit().remove();\n        this.svg_nodes.attr({\n            'r' : (node) => {\n                return node.popularity * 4;\n            },\n        }).style({\n            'fill': '#f6e8e9',\n            'stroke': '#a254a2', \n        }).on('click', (node) => {\n            if(d3.event.defaultPrevented) {\n                return;\n            }\n            if(node.desc !== '') {\n                this.message(node.desc, '节点描述');\n            }\n        }).call(this.force.drag);\n        this.svg_nodes_texts.enter().append('text');\n        this.svg_nodes_texts.exit().remove();\n        \n        this.svg_nodes_texts.attr({\n            'dy': '.35em',\n            'text-anchor': 'middle',\n            'x': function() {\n                let tspan = d3.select(this).select('tspan');\n                if(tspan.size() === 0) {\n                    d3.select(this).append('tspan')\n                        .attr({\n                            'x': 0,\n                            'y': 0,\n                        })\n                        .text((d) => {\n                            return d.name;\n                        });\n                }else {\n                    tspan.attr({\n                        'x': 0,\n                        'y': 0,\n                    }).text((d) => {\n                        return d.name;\n                    });\n                }\n            }\n        }).style({\n            'fill': '#a254a2',\n        });\n        this.force.start();\n    }\n    updateEdge() {\n        this.svg_edges.enter().append('path');\n        this.svg_edges.exit().remove();\n        this.svg_edges.style({\n            'stroke': '#b43232',\n            'stroke-width': 0.5,\n        }).attr({\n            'id': (d, i) => {\n                return `edgepath${i}`;\n            }\n        }).attr('d', (d) => {\n            return 'M ' + d.source.x + ' ' + d.source.y + ' L ' + d.target.x + ' ' + d.target.y;\n        });\n        \n        let svg_edges_texts = this.svg_edges_texts.enter().append('text');\n        this.svg_edges_texts.exit().remove();\n        svg_edges_texts.append('textPath');\n        this.svg_edges_texts.style({\n            'fill': 'black',\n            'pointer-events': 'none',\n        }).attr({\n            'dx': (edge) => {\n                const radius = [];\n                this.nodes_data.forEach((node) => {\n                    if (node.name == edge.source.name || node.name == edge.target.name) {\n                        radius.push(node.popularity * 4);\n                    }\n                });\n                let dist = edge.dist * 25;\n                radius.forEach(function (r) {\n                    dist -= r / 2;\n                })\n                return dist / 2 + 30;\n            }\n        });\n        this.svg_edges_texts.select('textPath')\n                            .attr('xlink:href', (d, i) => {\n                                return `#edgepath${i}`;\n                            })\n                            .style('pointer-events', 'none')\n                            .text((d) => {\n                                return d.dist;\n                            });\n        this.force.start();\n    }\n    tick() {\n        this.force.on('tick', () => {\n            this.svg_edges.attr('d', (d) => {\n                return 'M ' + d.source.x + ' ' + d.source.y + ' L ' + d.target.x + ' ' + d.target.y;\n            });\n            this.svg_nodes.attr('transform', this.transform);\n            this.svg_nodes_texts.attr('transform', this.transform);\n            if(this.svg_path_texts) {\n                this.svg_path_texts.attr('transform', this.transform);\n            }\n        })\n    }\n    transform(d) {\n        return \"translate(\" + (d.x) + \",\" + (d.y) + \")\";\n    }\n    resetStyle() {\n        this.nodes_data.forEach((data) => {\n            data.isVisited = false;\n            data.path = Infinity;\n        });\n        this.edges_data.forEach((data) => {\n            data.isVisited = false;\n        });\n        this.svg_edges.style(\"stroke-width\", () => {\n            return 0.5;\n        });\n        this.svg_nodes.style(\"fill\", \"#F6E8E9\");\n        if (this.svg_path_texts) {\n            this.svg.select(\"#svg_path_texts\").remove();\n            this.svg_path_texts = null;\n        }\n    }\n    insertNode(name, desc, popularity) {\n        this.nodes_data.push({\n            name: name,\n            desc: desc,\n            popularity: popularity,\n        });\n        this.svg_nodes = this.svg_nodes.data(this.force.nodes());\n        this.svg_nodes_texts = this.svg_nodes_texts.data(this.force.nodes());\n        this.updateNode();\n    }\n    deleteNode(name) {\n        let index = -1;\n        for(let i = 0, len = this.nodes_data.length; i < len; i++) {\n            if(this.nodes_data[i].name === name) {\n                index = i;\n                break;\n            }\n        }\n        let removed = [];\n        this.nodes_data.splice(index, 1);\n        for(let i = 0, len = this.edges_data.length; i <len; i++) {\n            if(this.edges_data[i].source.name === name || this.edges_data[i].target.name === name) {\n                removed.unshift(i);\n            }\n        }\n        for (let i = 0, len = removed.length; i < len; i++) {\n            this.edges_data.splice(removed[i], 1);\n        }\n        this.svg_nodes = this.svg_nodes.data(this.force.nodes())\n        this.svg_nodes_texts = this.svg_nodes_texts.data(this.force.nodes())\n        this.updateNode();\n\n        this.svg_edges = this.svg_edges.data(this.force.links());\n        this.svg_edges_texts = this.svg_edges_texts.data(this.force.links());\n        this.updateEdge();\n    }\n    insertEdge(begin, end, dist) {\n        let beginNode, endNode;\n        this.nodes_data.forEach(function (node) {\n            if (node.name == begin) {\n                beginNode = node;\n            }\n            if (node.name == end) {\n                endNode = node;\n            }\n        });\n\n        this.edges_data.push({\"source\": beginNode, \"target\": endNode, \"dist\": parseInt(dist)});\n\n        this.svg_edges = this.svg_edges.data(this.force.links());\n        this.svg_edges_texts = this.svg_edges_texts.data(this.force.links());\n        this.updateEdge();\n    }\n    deleteEdge(begin, end) {\n        let index = -1;\n        for (let i = 0, len = this.edges_data.length; i < len; i++) {\n            if ((this.edges_data[i].source.name == begin && this.edges_data[i].target.name == end) || (this.edges_data[i].source.name == end && this.edges_data[i].target.name == begin)) {\n                index = i;\n                break;\n            }\n        }\n        this.edges_data.splice(index, 1);\n        this.svg_edges = this.svg_edges.data(this.force.links());\n        this.svg_edges_texts = this.svg_edges_texts.data(this.force.links());\n        this.updateEdge();\n    }\n    traversalAnimation(count, index, data, callback) {\n        if (index <= data.length) {\n            if (count % 60 === 0 && count >= 0) {\n                callback(index);\n                requestAnimationFrame(() => this.traversalAnimation(count + 1, index + 1, data, callback));\n            } else {\n                requestAnimationFrame(() => this.traversalAnimation(count + 1, index, data, callback));\n            }\n        }\n    }\n    traversalAnimation2(count, index, data, callback) {\n        if (index <= data.length) {\n            if (count % 90 === 0 && count >= 0) {\n                callback(index);\n                requestAnimationFrame(() => this.traversalAnimation2(count + 1, index + 1, data, callback));\n            } else {\n                requestAnimationFrame(() => this.traversalAnimation2(count + 1, index, data, callback));\n            }\n        }\n    }\n    displayDFSTraversal(data, callback) {\n        this.traversalAnimation(0, 0, data, (i) => {\n            if(i === data.length) {\n                callback();\n            }else if(i < data.length) {\n                this.svg_nodes.transition().duration(500).ease(\"linear\").style(\"fill\", function (node) {\n                    if (node.name == data[i].name) {\n                        node.isVisited = true;\n                        return \"#A254A2\";\n                    } else if (node.isVisited == true) {\n                        return \"#A95\";\n                    } else {\n                        return \"#F6E8E9\";\n                    }\n                });\n            }\n        });\n        this.traversalAnimation(-30, 0, data, (i) => {\n            if(i + 1 < data.length) {\n                this.svg_edges.transition().duration(500).ease(\"linear\").style(\"stroke-width\", function (line) {\n                    if ((line.source.name == data[i].name && line.target.name == data[i + 1].name) || (line.source.name == data[i + 1].name && line.target.name == data[i].name)) {\n                        return 3;\n                    } else {\n                        return 0.5;\n                    }\n                })\n            }\n        });\n    }\n    displayBFSTraversal(data, callback) {\n        let dataIndex = 0;\n        this.traversalAnimation(0, 0, data, (i) => {\n            if (i === data.length) {\n                callback();\n            } else if (i < data.length) {\n                const name = data[i].name;\n                this.svg_nodes.transition().duration(500).ease(\"linear\").style(\"fill\", function (node) {\n                    if (node.name == name) {\n                        node.isVisited = true;\n                        return \"#A254A2\";\n                    } else if (node.isVisited == true) {\n                        return \"#A95\";\n                    } else {\n                        return \"#F6E8E9\";\n                    }\n                });\n                if (data[i].selected == true) {\n                    dataIndex = i;\n                }\n            }\n        });\n        this.traversalAnimation(-30, 0, data, (i) => {\n            if (i + 1 < data.length) {\n                this.svg_edges.transition().duration(500).ease(\"linear\").style(\"stroke-width\", function (line) {\n                    if (i + 1 >= data.length || data[i + 1].selected == true) {\n                        return 0.5;\n                    }\n                    if ((line.source.name == data[dataIndex].name && line.target.name == data[i + 1].name) || (line.source.name == data[i + 1].name && line.target.name == data[dataIndex].name)) {\n                        return 3;\n                    } else {\n                        return 0.5;\n                    }\n                });\n            }\n        });\n    }\n    outputDijkstra(data, callback) {\n        let dataIndex = 0, item = null;\n        // 初始化\n        this.svg_path_texts = this.svg.append(\"g\").attr(\"id\", \"svg_path_texts\").selectAll(\"text\").data(this.force.nodes()).enter().append(\"text\").attr({\n            \"dy\": \".35em\",\n            \"text-anchor\": \"middle\",\n            \"x\": function (node) {\n                return node.popularity * 4 + 5;\n            },\n            \"y\": function (node) {\n                \n                return node.popularity * 4 + 5;\n            }\n        }).text(function (node) {\n            if (node.name == data[0].node) {\n                node.path = 0;\n            }\n            return node.path;\n        })\n        .attr(\"transform\", this.transform);\n\n        this.traversalAnimation2(0, 0, data, (i) => {\n            if (i === data.length) {\n                callback && callback();\n                dataIndex = 0;\n            } else if (i < data.length) {\n                item = data[i];\n                const name = data[i].node;\n                const selected = data[i].selected;\n                this.svg_nodes.transition().duration(500).ease(\"linear\").style(\"fill\", function (node) {\n                    if (selected == true && node.name == name) {\n                        node.isVisited = true;\n                        return \"#233142\";\n                    }\n                    if (node.name == name) {\n                        return \"#A254A2\";\n                    } else if (node.isVisited == true) {\n                        return \"#A95\";\n                    } else {\n                        return \"#F6E8E9\";\n                    }\n                })\n                if (data[i].selected == true) {\n                    dataIndex = i;\n                }\n            }\n        });\n\n        this.traversalAnimation2(-30, 0, data, (i) => {\n            if (i + 1 < data.length) {\n                this.svg_edges.transition().duration(500).ease(\"linear\").style(\"stroke-width\", function (line) {\n                    if (i + 1 >= data.length || data[i + 1].selected == true) {\n                        return 0.5;\n                    }\n                    if ((line.source.name == data[dataIndex].node && line.target.name == data[i + 1].node) || (line.source.name == data[i + 1].node && line.target.name == data[dataIndex].node)) {\n                        return 3;\n                    } else {\n                        return 0.5;\n                    }\n                });\n            }\n        });\n\n        this.traversalAnimation2(-60, 0, data, (i) => {\n            if (i + 1 < data.length) {\n                const name = item.node;\n                const dist = item.dist;\n                this.svg_path_texts.transition().duration(500).ease(\"linear\").text(function (node) {\n                    if (node.name == name) {\n                        node.path = dist;\n                    }\n                    return node.path;\n                });\n            }\n        });\n    }\n    outputKruskal(edges, callback) {\n        this.traversalAnimation(0, 0, edges, (i) => {\n            if (i === edges.length) {\n                this.svg_nodes.transition().duration(1000).ease(\"linear\").style(\"fill\", function (node) {\n                    if (node.isVisited == true) {\n                        return \"#A95\";\n                    } else {\n                        return \"#F6E8E9\";\n                    }\n                });\n                callback && callback();\n            } else if (i < edges.length) {\n                const edge = edges[i];\n                this.svg_edges.transition().duration(1000).ease(\"linear\").style(\"stroke-width\", function (line) {\n                    if ((line.source.name == edge.begin && line.target.name == edge.end) || (line.source.name == edge.end && line.target.name == edge.begin)) {\n                        line.isVisited = true;\n                        return 3;\n                    } else if (line.isVisited) {\n                        return 3;\n                    } else {\n                        return 0.5;\n                    }\n                });\n                this.svg_nodes.transition().duration(1000).ease(\"linear\").style(\"fill\", function (node) {\n                    if (edge.begin == node.name || edge.end == node.name) {\n                        node.isVisited = true;\n                        return \"#A254A2\";\n                    } else if (node.isVisited == true) {\n                        return \"#A95\";\n                    } else {\n                        return \"#F6E8E9\";\n                    }\n                })\n            }\n        });\n    }\n    outputPrim(edges, callback) {\n        this.traversalAnimation2(0, 0, edges, (i) => {\n            if (i === edges.length) {\n                this.svg_nodes.transition().duration(500).ease(\"linear\").style(\"fill\", function (node) {\n                    if (node.isVisited == true) {\n                        return \"#A95\";\n                    } else {\n                        return \"#F6E8E9\";\n                    }\n                });\n                callback && callback();\n            } else if (i < edges.length) {\n                const edge = edges[i];\n                this.svg_nodes.transition().duration(500).ease(\"linear\").style(\"fill\", function (node) {\n                    if (edge.begin == node.name) {\n                        node.isVisited = true;\n                        return \"#A254A2\";\n                    } else if (node.isVisited == true) {\n                        return \"#A95\";\n                    } else {\n                        return \"#F6E8E9\";\n                    }\n                });\n            }\n        });\n\n        this.traversalAnimation2(-30, 0, edges, (i) => {\n            if (i < edges.length) {\n                const edge = edges[i];\n                this.svg_edges.transition().duration(500).ease(\"linear\").style(\"stroke-width\", function (line) {\n\n                    if ((line.source.name == edge.begin && line.target.name == edge.end) || (line.source.name == edge.end && line.target.name == edge.begin)) {\n                        line.isVisited = true;\n                        return 3;\n                    } else if (line.isVisited) {\n                        return 3;\n                    } else {\n                        return 0.5;\n                    }\n                });\n            }\n        });\n\n        this.traversalAnimation2(-60, 0, edges, (i) => {\n            if (i < edges.length) {\n                const edge = edges[i];\n                this.svg_nodes.transition().duration(500).ease(\"linear\").style(\"fill\", function (node) {\n                    if (edge.end == node.name) {\n                        node.isVisited = true;\n                        return \"#A254A2\";\n                    } else if (node.isVisited == true) {\n                        return \"#A95\";\n                    } else {\n                        return \"#F6E8E9\";\n                    }\n                });\n            }\n        });\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/animation/graph.js","\n\nexport default class ALGraph {\n    constructor() {\n        this.nodeArr = [];\n        this.map = [];\n        this.edgeCount = 0;\n    }\n    getData() {\n        const data = {};\n        data['nodes'] = this.nodeArr.map((node) => {\n            return {\n                \"name\": node.name,\n                \"popularity\": node.popularity,\n                \"desc\": node.desc,\n                \"path\": \"Infinity\"\n            };\n        })\n        data['edges'] = [];\n        this.nodeArr.forEach((node) => {\n            const source = node.name;\n            if(node.pEdge !== null) {\n                let edge = node.pEdge;\n                let target = edge.nextNodeName;\n                if(!data['edges'].some((edge) => {\n                    return (edge.source === source && edge.target === target) || (edge.source === target && edge.target === source);\n                })) {\n                    data['edges'].push({\n                        source: source,\n                        target: target,\n                        dist: edge.distance,\n                    });\n                }\n                while (edge.pNext !== null) {\n                    edge = edge.pNext;\n                    target = edge.nextNodeName;\n                    if (!data['edges'].some((edge) => {\n                        return (edge.source === source && edge.target === target) || (edge.source === target && edge.target === source);\n                    })) {\n                        data['edges'].push({source: source, target: target, dist: edge.distance});\n                    }\n                }\n            }\n        })\n        return data;\n    }\n    /**\n     * 找到节点名对应数组中的下标\n     * @param {string} name 节点名\n     */\n    getNodeIndex(name) {\n        for(let i = 0, len = this.nodeArr.length; i < len; i++) {\n            if(this.nodeArr[i].name === name) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n     * 获取邻接矩阵\n     */\n    getAdjMatrix() {\n        return this.map;\n    }\n    /**\n     * 判断起始点到终点对应的边是否存在\n     * @param {int} bIndex 起始点索引\n     * @param {int} eIndex 终点索引\n     */\n    hasEdgeExisted(bIndex, eIndex) {\n        if(this.map[bIndex][eIndex] === Infinity || this.map[bIndex][eIndex] ===  0) {\n            return false;\n        }else {\n            return true;\n        }\n    }\n    /**\n     * 判断所有节点是否已经被访问过了\n     */\n    haveAllNodesVisited() {\n        for(let i = 0, len = this.nodeArr.length; i < len; i++) {\n            if(!this.nodeArr[i].isVisited) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * 通过索引获取节点名\n     * @param {int} index 索引\n     */\n    getNodeName(index) {\n        return this.nodeArr[index].name;\n    }\n    /**\n     * 将所有节点设置为未访问过\n     */\n    resetNodes() {\n        for(let i = 0, len = this.nodeArr.length; i < len; i++) {\n            this.nodeArr[i].isVisited = false;\n        }\n    }\n    /**\n     * 插入节点\n     * @param {string} name 节点名\n     * @param {string} description 节点描述\n     * @param {int} popularity 节点权重\n     */\n    insertNode(name, description, popularity) {\n        const arr = [];\n        for(let i = 0, len = this.nodeArr.length; i < len; i++) {\n            this.map[i].push(Infinity);\n            arr.push(Infinity);\n        }\n        arr.push(0);\n        this.map.push(arr);\n        this.nodeArr.push({\n            name: name,\n            desc : description,\n            popularity: parseInt(popularity) || 0,\n            pEdge: null,\n            isVisited: false,\n        });\n    }\n    /**\n     * 删除节点\n     * @param {string} name 节点名\n     */\n    deleteNode(name) {\n        const index = this.getNodeIndex(name);\n        for(let i = 0, len = this.nodeArr.length; i < len; i++) {\n            this.map[i].splice(index, 1);\n        }\n        this.map.splice(index, 1);\n        this.nodeArr.splice(index, 1);\n        for(let i = 0, len = this.nodeArr.length; i < len; i++) {\n            if (this.nodeArr[i].pEdge === null) {\n                continue;\n            }\n            if (this.nodeArr[i].pEdge.nextNodeName === name) {\n                this.nodeArr[i].pEdge = this.nodeArr[i].pEdge.pNext;\n            }else {\n                let edge = this.nodeArr[i].pEdge;\n                while(edge.pNext !== null) {\n                    if(edge.pNext.nextNodeName === name) {\n                        edge.pNext = edge.pNext.pNext;\n                        break;\n                    }\n                    edge = edge.pNext;\n                }\n            }\n        }\n    }\n    /**\n     * 插入单边\n     * @param {string} bName 起点名\n     * @param {string} eName 终点名\n     * @param {int} dist 距离\n     */\n    insertEdge(bName, eName, dist) {\n        const bIndex = this.getNodeIndex(bName);\n        const eIndex = this.getNodeIndex(eName);\n        if(bIndex === -1 || eIndex === -1) {\n            return;\n        }\n        this.map[bIndex][eIndex] = dist;\n        if (this.nodeArr[bIndex].pEdge === null) {\n            this.nodeArr[bIndex].pEdge = {\n                nextNodeName: eName,\n                distance: parseInt(dist),\n                pNext: null,\n            };\n        }else {\n            let edge = this.nodeArr[bIndex].pEdge;\n            while(edge.pNext !== null) {\n                edge = edge.pNext;\n            }\n            edge.pNext = {\n                nextNodeName: eName,\n                distance: parseInt(dist),\n                pNext: null,\n            };\n        }\n    }\n    /**\n     * 插入双边\n     * @param {string} bName 起点名\n     * @param {string} eName 终点名\n     * @param {int} dist 距离\n     */\n    insertUndirectedEdge(bName, eName, dist) {\n        this.insertEdge(bName, eName, dist);\n        this.insertEdge(eName, bName, dist);\n        this.edgeCount++;\n    }\n    /**\n     * 删除单边\n     * @param {string} bName 起点名\n     * @param {string} eName 终点名\n     */\n    deleteEdge(bName, eName) {\n        const bIndex = this.getNodeIndex(bName);\n        const eIndex = this.getNodeIndex(eName);\n        if (this.nodeArr[bIndex].pEdge === null) {\n            return\n        }\n        if (this.nodeArr[bIndex].pEdge.nextNodeName === eName) {\n            this.nodeArr[bIndex].pEdge = this.nodeArr[bIndex].pEdge.pNext;\n        }else {\n            let edge = this.nodeArr[bIndex].pEdge;\n            while(edge.pNext !== null) {\n                if(edge.pNext.nextNodeName === eName) {\n                    edge.pNext = edge.pNext.pNext;\n                    break;\n                }\n                edge = edge.pNext;\n            }\n        }\n        this.map[bIndex][eIndex] = Infinity;\n    }\n    /**\n     * 删除双边\n     * @param {string} bName 起点名\n     * @param {string} eName 终点名\n     */\n    deleteUndirectedEdge(bName, eName) {\n        this.deleteEdge(bName, eName);\n        this.deleteEdge(eName, bName);\n        this.edgeCount--;\n    }\n\n    /**\n     * 深度遍历图\n     * @param {int} index 起点索引\n     * @param {array} res 结果集合\n     */\n    DFSTraverse(index, res) {\n        if(this.nodeArr[index].isVisited === false) {\n            res.push({\n                name: this.nodeArr[index].name,\n            });\n            this.nodeArr[index].isVisited = true;\n        }else {\n            return false;\n        }\n        for(let i = 0, len = this.nodeArr.length; i < len; i++) {\n            if(this.map[index][i] !== 0 && this.map[index][i] !== Infinity) {\n                if(!this.nodeArr[i].isVisited) {\n                    this.DFSTraverse(i, res);\n                    res.push({\n                        name: this.nodeArr[index].name,\n                    });\n                }\n            }\n        }\n    }\n    /**\n     * 深度遍历遍历图\n     * @param {string} beginName 起点名\n     */\n    createGraphByDFS(beginName) {\n        const res = [];\n        const index = this.getNodeIndex(beginName);\n        if(index !== -1) {\n            this.DFSTraverse(index, res);\n        }\n        this.resetNodes();\n        return res;\n    }\n    /**\n     * 广度遍历\n     * @param {int} index 起点索引\n     * @param {array} res 结果集\n     */\n    BFSTraverse(index, res) {\n        const queue = [];\n        let idx = -1;\n        this.nodeArr[index].isVisited = true;\n        queue.push(index);\n        while(queue.length !== 0) {\n            idx = queue.shift();\n            res.push({\n                name: this.nodeArr[idx].name,\n                selected: true,\n            });\n            for(let i = 0, len = this.nodeArr.length; i < len; i++) {\n                if(this.map[idx][i] !== 0 && this.map[idx][i] !== Infinity) {\n                    if(!this.nodeArr[i].isVisited) {\n                        this.nodeArr[i].isVisited = true;\n                        res.push({\n                            name: this.nodeArr[i].name,\n                            selected: false,\n                        });\n                        queue.push(i);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * 广度遍历遍历图\n     * @param {string} beginName 起点名\n     */\n    createGraphByBFS(beginName) {\n        const res = [];\n        const index = this.getNodeIndex(beginName);\n        if(index !== -1) {\n            this.BFSTraverse(index, res);\n        }\n        this.resetNodes();\n        return res;\n    }\n    /**\n     * 最短路径算法\n     * @param {string} beginName 起始名\n     */\n    shortestPath(beginName) {\n        const res = [], unselected = [], selected = [];\n        for(let i = 0, len = this.nodeArr.length; i < len; i++) {\n            selected[i] = Infinity;\n            unselected[i] = Infinity;\n        }\n        let path = 0;\n        let index = this.getNodeIndex(beginName);\n        while(path >= 0 && index >= 0) {\n            selected[index] = path;\n            unselected[index] = -1;\n            res.push({\n                node: this.getNodeName(index),\n                dist: selected[index],\n                selected: true,\n            });\n            let edge = this.nodeArr[index].pEdge;\n            while(edge !== null) {\n                let idx = this.getNodeIndex(edge.nextNodeName);\n                if(selected[idx] === Infinity) {\n                    let dist = edge.distance;\n                    unselected[idx] = (path + dist) < unselected[idx] ? (path + dist) : unselected[idx];\n                    res.push({\n                        node: this.getNodeName(idx),\n                        dist: unselected[idx],\n                        selected: false,\n                    });\n                }\n                edge = edge.pNext;\n            }\n            let min = Infinity;\n            index = -1;\n            for(let i = 0, len = this.nodeArr.length; i < len; i++) {\n                if(unselected[i] > 0 && min > unselected[i]) {\n                    min = unselected[i];\n                    index = i;\n                }\n            }\n            path = min;\n        }\n        return res;\n    }\n    /**\n     * Kruskal 算法实现\n     */\n    outputKruskal() {\n        const res = [];\n        const vset = [];\n        const edges = []\n        for(let i = 0, len = this.nodeArr.length; i < len; i++) {\n            vset[i] = i;\n        }\n        for(let i = 0, len = this.nodeArr.length; i < len; i++) {\n            for(let j = 0; j < i; j++) {\n                if(this.map[i][j] !== Infinity && this.map[i][j] !== 0) {\n                    edges.push({\n                        begin: i,\n                        end: j,\n                        dist: this.map[i][j],\n                    });\n                }\n            }\n        }\n        edges.sort((edge1, edge2) => {\n            return edge1.dist - edge2.dist;\n        });\n        let count = 1, idx = 0;\n        while(count < this.nodeArr.length && idx < edges.length) {\n            let sn1 = vset[edges[idx].begin];\n            let sn2 = vset[edges[idx].end];\n            if(sn1 !== sn2) {\n                count++;\n                res.push({\n                    begin: this.getNodeName(edges[idx].begin),\n                    end: this.getNodeName(edges[idx].end),\n                    dist: edges[idx].dist,\n                });\n                for(let i = 0, len = vset.length; i < len; i++) {\n                    if(vset[i] === sn1) {\n                        vset[i] = sn2;\n                    }\n                }\n            }\n            idx++;\n        }\n        return res;\n    }\n    /**\n     * Prim 算法实现\n     */\n    outputPrim() {\n        const res = [];\n        let index = 0;\n        const edges = [];\n        while(!this.haveAllNodesVisited()) {\n            this.nodeArr[index].isVisited = true;\n            let edge = this.nodeArr[index].pEdge;\n            while(edge !== null) {\n                edges.push({\n                    begin: this.nodeArr[index].name,\n                    end: edge.nextNodeName,\n                    dist: edge.distance,\n                });\n                edge = edge.pNext;\n            }\n\n            while(!this.haveAllNodesVisited()) {\n                edges.sort((edge1, edge2) => {\n                    return edge1.dist - edge2.dist;\n                });\n                if(edges.length === 0) {\n                    return res;\n                }\n                const e = edges[0];\n                edges.splice(0, 1);\n                if(!this.nodeArr[this.getNodeIndex(e.end)].isVisited) {\n                    index = this.getNodeIndex(e.end);\n                    res.push(e);\n                    break;\n                }\n            }\n\n        }\n        this.resetNodes();\n        return res;\n    }\n    /**\n     * 按照节点权重进行排序\n     */\n    sortByPopularity() {\n        const data = this.nodeArr.slice(0);\n        data.sort((node1, node2) => {\n            return node1.popularity < node2.popularity;\n        });\n        const res = [];\n        for(let i = 0, len = data.length; i < len; i++) {\n            res.push({\n                name: data[i].name,\n                popularity: data[i].popularity,\n            });\n        }\n        return res;\n    }\n    /**\n     * 搜索关键词\n     * @param {string} keyword 关键词\n     */\n    searchKeyword(keyword) {\n        const data = [];\n        for(let i = 0, len = this.nodeArr.length; i < len; i++) {\n            let desc = this.nodeArr[i].desc;\n            if(desc.indexOf(keyword) >= 0) {\n                data.push({\n                    name: this.nodeArr[i].name,\n                    popularity: this.nodeArr[i].popularity,\n                    desc: desc.replace(new RegExp(keyword, 'g'), \"<span style='color:#A254A2'>\" + keyword + \"</span>\"),\n                });\n            }\n        }\n        return data;\n    }\n    /**\n     * 获取所有节点\n     */\n    getNodes() {\n        const data = this.nodeArr.map((node) => {\n            return {\n                name: node.name,\n                desc: node.desc,\n                popularity: node.popularity,\n                path: Infinity,\n            };\n        })\n        return data;\n    }\n    /**\n     * 获取所有边\n     */\n    getEdges() {\n        const data = [];\n        for(let i = 0, len = this.nodeArr.length; i < len; i++) {\n            for(let j = 0; j < i; j++) {\n                if(this.map[i][j] !== 0 && this.map[i][j] !== Infinity) {\n                    data.push({\n                        source: this.getNodeName(i),\n                        target: this.getNodeName(j),\n                        dist: this.map[i][j],\n                    });\n                }\n            }\n        }\n        return data;\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/util/ALGraph.js","import nodes from '../data/nodes.json';\nimport edges from '../data/edges.json';\n\nexport const readData = () => {\n  if (window.localStorage) {\n    const localStorage = window.localStorage;\n    if ((localStorage.getItem('nodes') !== 'undefined' && localStorage.getItem('nodes') !== null) && (localStorage.getItem('edges') !== 'undefined' && localStorage.getItem('edges') !== null)) {\n      return {\n        current: {\n          nodes : JSON.parse(localStorage.getItem('nodes')),\n          edges : JSON.parse(localStorage.getItem('edges')),\n        },\n        default: {\n          nodes: nodes,\n          edges: edges,\n        },\n      }\n    }\n  }\n  return {\n    default: {\n      nodes: nodes,\n      edges: edges\n    },\n  }\n};\n\n\nexport const saveData = (nodes, edges) => {\n  if(window.localStorage) {\n    const localStorage = window.localStorage;\n    localStorage.setItem('nodes', JSON.stringify(nodes));\n    localStorage.setItem('edges', JSON.stringify(edges));\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/localData.js","<template>\n    <div id=\"animation\">\n    </div>\n</template>\n\n<script>\nimport Graph from './graph';\nimport ALGraph from '../../util/ALGraph'\nimport { readData, saveData } from '../../util/localData';\nexport default {\n    name: 'animation',\n    props: ['handleMenu'],\n    mounted() {\n        let nodes = null, edges = null;\n        const data = readData();\n        console.log(data);\n        if(data.current) {\n            nodes = data.current.nodes;\n            edges = data.current.edges;\n        }else {\n            nodes = data.default.nodes;\n            edges = data.default.edges;\n        }\n        // 底层算法支撑\n        this.initMap(nodes, edges);\n\n        // 视图创建\n        this.initView(nodes, edges);\n        window.onbeforeunload = () => {\n            const { nodes, edges } = this.alGraph.getData();\n            saveData(nodes, edges);\n        };\n    },\n    methods: {\n        resetNodes() {\n            const animation = document.getElementById('animation');\n            animation.innerHTML = '';\n            const data = readData();\n            if(data.default) {\n                const {nodes, edges } = data.default;\n                this.nodes = nodes;\n                this.edges = edges;\n                this.initMap(nodes, edges);\n                this.initView(nodes, edges);\n            }\n        },\n        successMessage(message) {\n            this.$message({\n                message: message,\n                type: 'success',\n            });\n        },\n        errorMessage(message) {\n            this.$message.error(message);\n        },\n        initMap(nodes, edges) {\n            const g = new ALGraph();\n            nodes.forEach(function(node) {\n                g.insertNode(node.name, node.desc, node.popularity);\n            })\n            edges.forEach(function(edge) {\n                g.insertUndirectedEdge(edge.source, edge.target, edge.dist);\n            });\n            this.alGraph = g;\n        },\n        initView(nodes, edges) {\n            const graph = new Graph(nodes, edges, this.$message);\n            graph.drawing();\n            this.graph = graph;\n        },\n        resetStyle() {\n            this.graph.resetStyle();\n        },\n        addNode(options) {\n            const { name, desc, popularity } = options;\n            const index = this.alGraph.getNodeIndex(name);\n            if(index === -1){\n                this.successMessage(`${name}节点添加成功`);\n                this.handleMenu();\n                this.alGraph.insertNode(name, desc, popularity);\n                this.graph.insertNode(name, desc, popularity);\n            }else{\n                this.errorMessage(`${name}节点已经存在了，请勿重复添加`);\n            }\n        },\n        deleteNode(options) {\n            const { name } = options;\n            const index = this.alGraph.getNodeIndex(name);\n            if(index === -1) {\n                this.errorMessage(`找不到${name}节点`);\n            }else {\n                this.successMessage(`${name}节点删除成功`);\n                this.handleMenu();\n                this.alGraph.deleteNode(name);\n                this.graph.deleteNode(name);   \n            }\n        },\n        addEdge(options) {\n            const { begin, end, dist } = options;\n            const bIndex = this.alGraph.getNodeIndex(begin);\n            const eIndex = this.alGraph.getNodeIndex(end);\n            if(bIndex === -1) {\n                this.errorMessage(`${begin}节点不存在，无法添加边`);\n            }else if(eIndex === -1) {\n                this.errorMessage(`${end}节点不存在，无法添加边`);\n            }else {\n                if(this.alGraph.hasEdgeExisted(bIndex, eIndex)) {\n                    this.errorMessage(`${begin}-${end}边已经存在，无法重复`);\n                }else {\n                    this.successMessage(`添加${begin}-${end}边成功`);\n                    this.handleMenu();\n                    this.alGraph.insertUndirectedEdge(begin, end, dist);\n                    this.graph.insertEdge(begin, end, dist);\n                }\n            }\n        },\n        deleteEdge(options) {\n            const { begin, end } = options;\n            const bIndex = this.alGraph.getNodeIndex(begin);\n            const eIndex = this.alGraph.getNodeIndex(end);\n            if(bIndex === -1) {\n                this.errorMessage(`${begin}节点不存在，无法添加边`);\n            }else if(eIndex === -1) {\n                this.errorMessage(`${end}节点不存在，无法添加边`);\n            }else {\n                if(this.alGraph.hasEdgeExisted(bIndex, eIndex)) {\n                    this.successMessage(`删除${begin}-${end}边成功`);\n                    this.handleMenu();\n                    this.alGraph.deleteUndirectedEdge(begin, end);\n                    this.graph.deleteEdge(begin, end);\n                }else {\n                    this.errorMessage(`无法找到${begin}-${end}的边`);\n                }\n            }\n        },\n        traversal(options) {\n            const { method, name } = options;\n            let res = [];\n            if(method === 'bfs') {\n                res = this.alGraph.createGraphByBFS(name);\n            }else if(method === 'dfs') {\n                res = this.alGraph.createGraphByDFS(name);\n            }\n            if(res.length === 0) {\n                this.errorMessage('输入有误，无法找到起始点');\n            }else if(method === 'dfs') {\n                this.graph.displayDFSTraversal(res, () => {\n                    const message = res.map((item) => {\n                        return item.name;\n                    }).reduce((prev, cur) => {\n                        return prev + ' --> ' + cur;\n                    });\n                    this.$alert(message, '深度遍历 DFS 算法结果', {\n                        confirmButtonText: '确定',\n                        callback: () => {\n                            this.resetStyle();\n                        }\n                    });\n                });\n                this.handleMenu();\n\n            }else if(method === 'bfs') {\n                this.graph.displayBFSTraversal(res, () => {\n                   const message = res.map((item) => {\n                        return item.name;\n                    }).reduce((prev, cur) => {\n                        return prev + ' --> ' + cur;\n                    });\n                    this.$alert(message, '广度遍历 BFS 算法结果', {\n                        confirmButtonText: '确定',\n                        callback: () => {\n                            this.resetStyle();\n                        }\n                    });         \n                });\n                this.handleMenu();\n            }\n        },\n        dijkstra(options) {\n            const { name } = options;\n            const res = this.alGraph.shortestPath(name);\n            if(res.length === 0) {\n                this.errorMessage('输入有误，无法找到起始点');\n            }else {\n                this.graph.outputDijkstra(res, () => {\n                    const distObj = {};\n                    res.forEach(function(item){\n                        if(!distObj[item.node]){\n                            distObj[item.node] = item.dist;\n                        }else{\n                            distObj[item.node] = item.dist < distObj[item.node] ? item.dist : distObj[item.node];\n                        }\n                    });\n                    let message = \"<table>\";\n                    message += \"<thead><tr><th>#</th>\";\n                    for(const key in distObj){\n                        message += \"<th>\" + key + \"</th>\";\n                    }\n                    message += \"</tr></thead><tbody><tr><th>\" + res[0].node + \"</th>\";\n                    for(const key in distObj){\n                        message += \"<th>\" + distObj[key] + \"</th>\";\n                    }\n                    message += \"</tr></tbody></table>\";\n                    this.$alert(message, 'Dijkstra 算法结果:', {\n                        dangerouslyUseHTMLString: true,\n                        customClass: \"result-dialog\",\n                        confirmButtonText: '确定',\n                        callback: () => {\n                            this.resetStyle();\n                        }\n                    });\n                });\n                this.handleMenu();\n            }\n        },\n        kruskal() {\n            const res = this.alGraph.outputKruskal();\n            this.graph.outputKruskal(res, () => {\n                let message = \"<table class='table table-striped'>\";\n                message += \"<tbody>\"\n                for(let i = 0, len = res.length; i < len; i++){\n                    message += \"<tr><th>\" + (i + 1) + \"、\" + res[i].begin + \" - \" + res[i].end + ' 需要修一条路.' + \"</th></tr>\";\n                }\n                message += \"</tbody></table>\";\n                this.$alert(message, 'Kruskal 算法结果:', {\n                    dangerouslyUseHTMLString: true,\n                    customClass: \"result-dialog\",\n                    confirmButtonText: '确定',\n                    callback: () => {\n                        this.resetStyle();\n                    }\n                });\n            });\n            this.handleMenu();\n        },\n        prim() {\n            const res = this.alGraph.outputPrim();\n            this.graph.outputPrim(res, () => {\n                let message = \"<table class='table table-striped'>\";\n                message += \"<tbody>\"\n                for(let i = 0, len = res.length; i < len; i++){\n                    message += \"<tr><th>\" + (i + 1) + \"、\" + res[i].begin + \" - \" + res[i].end + ' 需要修一条路.' + \"</th></tr>\";\n                }\n                message += \"</tbody></table>\";\n                this.$alert(message, 'Prim 算法结果:', {\n                    dangerouslyUseHTMLString: true,\n                    customClass: \"result-dialog\",\n                    confirmButtonText: '确定',\n                    callback: () => {\n                        this.resetStyle();\n                    }\n                });\n            });\n            this.handleMenu();\n        },\n    },  \n}\n</script>\n\n<style lang=\"scss\">\n    #animation {\n        width: 100%;\n        height: 100%;\n    }\n    .result-dialog {\n        width: 500px;\n    }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/animation/index.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"animation\"}})}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-2334237a\",\"hasScoped\":false,\"optionsId\":\"0\",\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/animation/index.vue\n// module id = null\n// module chunks = ","function injectStyle (context) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":false,\\\"minimize\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":false}!sass-loader?{\\\"sourceMap\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./index.vue\")\n}\n/* script */\nexport * from \"!!cache-loader?{\\\"cacheDirectory\\\":\\\"/Users/Mac/Github/graph-animation/v3/node_modules/.cache/cache-loader\\\"}!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\nimport __vue_script__ from \"!!cache-loader?{\\\"cacheDirectory\\\":\\\"/Users/Mac/Github/graph-animation/v3/node_modules/.cache/cache-loader\\\"}!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-2334237a\\\",\\\"hasScoped\\\":false,\\\"optionsId\\\":\\\"0\\\",\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./index.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/animation/index.vue\n// module id = null\n// module chunks = ","<template>\n    <div id=\"toolbar\">\n        <el-button class=\"menu-btn\" icon=\"el-icon-menu\" @click=\"handleMenu\">菜单</el-button>\n        <el-collapse class=\"toolbar-menu\" :class=\"{ 'toolbar-menu-show': isShow }\" v-model=\"activeName\" accordion>\n            <el-collapse-item title=\"重置操作 Reset Operation\" name=\"1\">\n                <el-row>\n                    <el-button @click=\"resetNodes\" class=\"full-btn\" size=\"small\">还原节点(默认节点)</el-button>\n                </el-row>\n            </el-collapse-item>\n            <el-collapse-item title=\"节点操作 Node Operation\" name=\"2\">\n                <el-row>\n                    <el-input v-model=\"node.name\" placeholder=\"请输入节点名称\"></el-input>\n                    <el-input v-model=\"node.popularity\" placeholder=\"请输入节点权重(整数)\"></el-input>\n                    <el-input v-model=\"node.desc\" placeholder=\"清输入节点的描述\"></el-input>\n                </el-row>\n                <el-row>\n                    <el-button @click=\"addNode\" class=\"full-btn\" size=\"small\">添加节点(需要全填)</el-button>\n                </el-row>\n                <el-row>\n                    <el-button @click=\"deleteNode\" class=\"full-btn\" size=\"small\">删除节点(只需名称)</el-button>\n                </el-row>\n            </el-collapse-item>\n            <el-collapse-item title=\"邻边操作 Edge Operation\" name=\"3\">\n                <el-row>\n                    <el-input v-model=\"edge.begin\" placeholder=\"请输入起始点名称\"></el-input>\n                    <el-input v-model=\"edge.end\" placeholder=\"请输入终止点名称\"></el-input>\n                    <el-input v-model=\"edge.dist\" placeholder=\"清输入邻边距离(整数)\"></el-input>\n                </el-row>\n                <el-row>\n                    <el-button @click=\"addEdge\" class=\"full-btn\" size=\"small\">添加邻边(需要全填)</el-button>\n                </el-row>\n                <el-row>\n                    <el-button @click=\"deleteEdge\" class=\"full-btn\" size=\"small\">删除邻边(无需距离)</el-button>\n                </el-row>\n            </el-collapse-item>\n            <el-collapse-item title=\"遍历节点 Traversal\" name=\"5\">\n                <el-row>\n                    <el-input v-model=\"traversal.name\" placeholder=\"请输入起始点名称\"></el-input>\n                </el-row>\n                <el-row>\n                    <el-button @click=\"dfsTraversal\" class=\"full-btn\" size=\"small\">深度遍历 DFS</el-button>\n                </el-row>\n                <el-row>\n                    <el-button @click=\"bfsTraversal\" class=\"full-btn\" size=\"small\">广度遍历 BFS</el-button>\n                </el-row>\n            </el-collapse-item>\n            <el-collapse-item title=\"最短路径 Shortest Path\" name=\"6\">\n                <el-row>\n                    <el-input v-model=\"shortestPath.name\" placeholder=\"请输入起始点名称\"></el-input>\n                </el-row>\n                <el-row>\n                    <el-button @click=\"dijkstra\" class=\"full-btn\" size=\"small\">Dijkstra 算法演示</el-button>\n                </el-row>\n            </el-collapse-item>\n            <el-collapse-item title=\"最小生成树 Minimum Spanning Tree\" name=\"7\">\n                <el-row>\n                    <el-button @click=\"kruskal\" class=\"full-btn\" size=\"small\">Kruskal 算法演示</el-button>\n                </el-row>\n                <el-row>\n                    <el-button @click=\"primByParent\" class=\"full-btn\" size=\"small\">Prim 算法演示</el-button>\n                </el-row>            \n            </el-collapse-item>\n        </el-collapse>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'toolbar',\n    props: ['isShow', 'handleMenu', 'addNodeByParent', 'deleteNodeByParent', 'addEdgeByParent', 'deleteEdgeByParent', 'traversalByParent', 'dijkstraByParent', 'kruskalByParent', 'primByParent', 'resetNodes'],\n    data() {\n        return {\n            activeName: '0',\n            node: {\n                name: '',\n                popularity: '',\n                desc: '',\n            },\n            edge: {\n                begin: '',\n                end: '',\n                dist: '',\n            },\n            traversal: {\n                name: '',\n            },\n            shortestPath: {\n                name: '',\n            },\n            keyword: '',\n        }\n    },\n    methods: {\n        errorMessage(message) {\n            this.$message.error(message);\n        },\n        empty() {\n            this.activeName = 0;\n            this.node = {\n                name: '',\n                popularity: '',\n                desc: '',\n            };\n            this.edge = {\n                begin: '',\n                end: '',\n                dist: '',\n            };\n            this.traversal.name = '';\n            this.shortestPath.name = '';\n            this.keyword = '';\n        },\n        addNode() {\n            const options = {\n                name: this.node.name,\n                popularity: parseInt(this.node.popularity),\n                desc: this.node.desc,\n            };\n            if(options.name === '') {\n                this.errorMessage('节点名称不能为空');\n            }else if(this.node.popularity === '' || isNaN(options.popularity)) {\n                this.errorMessage('节点权重不能为空，需为数字');\n            }else if(options.desc === '') {\n                this.errorMessage('节点描述不能为空');\n            }else {\n                this.addNodeByParent(options)\n            }\n        },\n        deleteNode() {\n            const options = {\n                name: this.node.name,\n            };\n            if(options.name === '') {\n                this.errorMessage('节点名称不能为空');\n            }else {\n                this.deleteNodeByParent(options)\n            }\n        },\n        addEdge() {\n            const options = {\n                begin: this.edge.begin,\n                end: this.edge.end,\n                dist: parseInt(this.edge.dist)\n            }\n            if(options.begin === '') {\n                this.errorMessage('未输入起始点');\n            }else if(options.end === '') {\n                this.errorMessage('未输入终止点');\n            }else if(this.edge.dist === '' || isNaN(options.dist)) {\n                this.errorMessage('邻边距离不能为空，需为数字');\n            }else {\n                this.addEdgeByParent(options);\n            }\n        },\n        deleteEdge() {\n            const options = {\n                begin: this.edge.begin,\n                end: this.edge.end,\n            }\n            if(options.begin === '') {\n                this.errorMessage('未输入起始点');\n            }else if(options.end === '') {\n                this.errorMessage('未输入终止点');\n            }else {\n                this.deleteEdgeByParent(options);\n            }\n        },\n        dfsTraversal() {\n            const options = {\n                name: this.traversal.name,\n                method: 'dfs',\n            }\n            if(options.name === '') {\n                this.errorMessage('未输入起始点');\n            }else {\n                this.traversalByParent(options);\n            }\n        },\n        bfsTraversal() {\n            const options = {\n                name: this.traversal.name,\n                method: 'bfs',\n            }\n            if(options.name === '') {\n                this.errorMessage('未输入起始点');\n            }else {\n                this.traversalByParent(options);\n            }\n        },\n        dijkstra() {\n            const options = {\n                name: this.shortestPath.name,\n            };\n            if(options.name === '') {\n                this.errorMessage('未输入起始点');\n            }else {\n                this.dijkstraByParent(options);\n            }\n        },\n        kruskal() {\n            this.kruskalByParent();\n        },\n        prim() {\n            this.primByParent();\n        }\n    }\n}\n</script>\n\n<style lang=\"scss\">\n    #toolbar {\n        position: absolute;\n        left: 0;\n        top: 0;\n        width: 280px;\n        user-select: none;\n        .menu-btn {\n            display: block;\n            width: 100%;\n            font-size: 16px;\n        }\n        .toolbar-menu {\n            height: 0;\n            display: none;\n            &.toolbar-menu-show {\n                display: block;\n            }\n        }\n        [role=\"tab\"] {\n            text-indent: 10px;\n        }\n        .el-collapse-item__arrow.is-active {\n            position: relative;\n            top: -4px;\n        }\n        .el-collapse-item__content {\n            padding-bottom: 0;\n        }\n        .full-btn {\n            display: block;\n            width: 100%;\n        }\n    }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/toolbar/index.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"toolbar\"}},[_c('el-button',{staticClass:\"menu-btn\",attrs:{\"icon\":\"el-icon-menu\"},on:{\"click\":_vm.handleMenu}},[_vm._v(\"菜单\")]),_c('el-collapse',{staticClass:\"toolbar-menu\",class:{ 'toolbar-menu-show': _vm.isShow },attrs:{\"accordion\":\"\"},model:{value:(_vm.activeName),callback:function ($$v) {_vm.activeName=$$v},expression:\"activeName\"}},[_c('el-collapse-item',{attrs:{\"title\":\"重置操作 Reset Operation\",\"name\":\"1\"}},[_c('el-row',[_c('el-button',{staticClass:\"full-btn\",attrs:{\"size\":\"small\"},on:{\"click\":_vm.resetNodes}},[_vm._v(\"还原节点(默认节点)\")])],1)],1),_c('el-collapse-item',{attrs:{\"title\":\"节点操作 Node Operation\",\"name\":\"2\"}},[_c('el-row',[_c('el-input',{attrs:{\"placeholder\":\"请输入节点名称\"},model:{value:(_vm.node.name),callback:function ($$v) {_vm.$set(_vm.node, \"name\", $$v)},expression:\"node.name\"}}),_c('el-input',{attrs:{\"placeholder\":\"请输入节点权重(整数)\"},model:{value:(_vm.node.popularity),callback:function ($$v) {_vm.$set(_vm.node, \"popularity\", $$v)},expression:\"node.popularity\"}}),_c('el-input',{attrs:{\"placeholder\":\"清输入节点的描述\"},model:{value:(_vm.node.desc),callback:function ($$v) {_vm.$set(_vm.node, \"desc\", $$v)},expression:\"node.desc\"}})],1),_c('el-row',[_c('el-button',{staticClass:\"full-btn\",attrs:{\"size\":\"small\"},on:{\"click\":_vm.addNode}},[_vm._v(\"添加节点(需要全填)\")])],1),_c('el-row',[_c('el-button',{staticClass:\"full-btn\",attrs:{\"size\":\"small\"},on:{\"click\":_vm.deleteNode}},[_vm._v(\"删除节点(只需名称)\")])],1)],1),_c('el-collapse-item',{attrs:{\"title\":\"邻边操作 Edge Operation\",\"name\":\"3\"}},[_c('el-row',[_c('el-input',{attrs:{\"placeholder\":\"请输入起始点名称\"},model:{value:(_vm.edge.begin),callback:function ($$v) {_vm.$set(_vm.edge, \"begin\", $$v)},expression:\"edge.begin\"}}),_c('el-input',{attrs:{\"placeholder\":\"请输入终止点名称\"},model:{value:(_vm.edge.end),callback:function ($$v) {_vm.$set(_vm.edge, \"end\", $$v)},expression:\"edge.end\"}}),_c('el-input',{attrs:{\"placeholder\":\"清输入邻边距离(整数)\"},model:{value:(_vm.edge.dist),callback:function ($$v) {_vm.$set(_vm.edge, \"dist\", $$v)},expression:\"edge.dist\"}})],1),_c('el-row',[_c('el-button',{staticClass:\"full-btn\",attrs:{\"size\":\"small\"},on:{\"click\":_vm.addEdge}},[_vm._v(\"添加邻边(需要全填)\")])],1),_c('el-row',[_c('el-button',{staticClass:\"full-btn\",attrs:{\"size\":\"small\"},on:{\"click\":_vm.deleteEdge}},[_vm._v(\"删除邻边(无需距离)\")])],1)],1),_c('el-collapse-item',{attrs:{\"title\":\"遍历节点 Traversal\",\"name\":\"5\"}},[_c('el-row',[_c('el-input',{attrs:{\"placeholder\":\"请输入起始点名称\"},model:{value:(_vm.traversal.name),callback:function ($$v) {_vm.$set(_vm.traversal, \"name\", $$v)},expression:\"traversal.name\"}})],1),_c('el-row',[_c('el-button',{staticClass:\"full-btn\",attrs:{\"size\":\"small\"},on:{\"click\":_vm.dfsTraversal}},[_vm._v(\"深度遍历 DFS\")])],1),_c('el-row',[_c('el-button',{staticClass:\"full-btn\",attrs:{\"size\":\"small\"},on:{\"click\":_vm.bfsTraversal}},[_vm._v(\"广度遍历 BFS\")])],1)],1),_c('el-collapse-item',{attrs:{\"title\":\"最短路径 Shortest Path\",\"name\":\"6\"}},[_c('el-row',[_c('el-input',{attrs:{\"placeholder\":\"请输入起始点名称\"},model:{value:(_vm.shortestPath.name),callback:function ($$v) {_vm.$set(_vm.shortestPath, \"name\", $$v)},expression:\"shortestPath.name\"}})],1),_c('el-row',[_c('el-button',{staticClass:\"full-btn\",attrs:{\"size\":\"small\"},on:{\"click\":_vm.dijkstra}},[_vm._v(\"Dijkstra 算法演示\")])],1)],1),_c('el-collapse-item',{attrs:{\"title\":\"最小生成树 Minimum Spanning Tree\",\"name\":\"7\"}},[_c('el-row',[_c('el-button',{staticClass:\"full-btn\",attrs:{\"size\":\"small\"},on:{\"click\":_vm.kruskal}},[_vm._v(\"Kruskal 算法演示\")])],1),_c('el-row',[_c('el-button',{staticClass:\"full-btn\",attrs:{\"size\":\"small\"},on:{\"click\":_vm.primByParent}},[_vm._v(\"Prim 算法演示\")])],1)],1)],1)],1)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-ca02dee2\",\"hasScoped\":false,\"optionsId\":\"0\",\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/toolbar/index.vue\n// module id = null\n// module chunks = ","function injectStyle (context) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":false,\\\"minimize\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":false}!sass-loader?{\\\"sourceMap\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./index.vue\")\n}\n/* script */\nexport * from \"!!cache-loader?{\\\"cacheDirectory\\\":\\\"/Users/Mac/Github/graph-animation/v3/node_modules/.cache/cache-loader\\\"}!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\nimport __vue_script__ from \"!!cache-loader?{\\\"cacheDirectory\\\":\\\"/Users/Mac/Github/graph-animation/v3/node_modules/.cache/cache-loader\\\"}!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-ca02dee2\\\",\\\"hasScoped\\\":false,\\\"optionsId\\\":\\\"0\\\",\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./index.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/toolbar/index.vue\n// module id = null\n// module chunks = ","<template>\n\t<div id=\"app\">\n\t\t<Animation \n\t\t\tref=\"animation\" \n\t\t\t:handleMenu=\"handleMenu\"\n\t\t/>\n\t\t<Toolbar\n\t\t\tref=\"toolbar\"\n\t\t\t:isShow=\"isShow\"\n\t\t\t:handleMenu=\"handleMenu\"\n\t\t\t:addNodeByParent=\"addNode\"\n\t\t\t:deleteNodeByParent=\"deleteNode\"\n\t\t\t:addEdgeByParent=\"addEdge\"\n\t\t\t:deleteEdgeByParent=\"deleteEdge\"\n\t\t\t:traversalByParent=\"traversal\"\n\t\t\t:dijkstraByParent=\"dijkstra\"\n\t\t\t:kruskalByParent=\"kruskal\"\n\t\t\t:primByParent=\"prim\"\n\t\t\t:resetNodes=\"resetNodes\"\n\t\t/>\n\t</div>\n</template>\n\n<script>\nimport Animation from './components/animation/index.vue';\nimport Toolbar from './components/toolbar/index.vue';\nexport default {\n\tname: 'app',\n\tdata() {\n\t\treturn {\n\t\t\tisShow: false,\n\t\t} \n\t},\n\tcomponents: {\n\t\tAnimation,\n\t\tToolbar,\n\t},\n\tmethods: {\n\t\thandleMenu() {\n\t\t\tthis.isShow = !this.isShow;\n\t\t\tthis.$refs.toolbar.empty()\n\t\t},\n\t\taddNode(options) {\n\t\t\tthis.$refs.animation.addNode(options);\n\t\t},\n\t\tdeleteNode(options) {\n\t\t\tthis.$refs.animation.deleteNode(options);\n\t\t},\n\t\taddEdge(options) {\n\t\t\tthis.$refs.animation.addEdge(options);\n\t\t},\n\t\tdeleteEdge(options) {\n\t\t\tthis.$refs.animation.deleteEdge(options);\n\t\t},\n\t\ttraversal(options) {\n\t\t\tthis.$refs.animation.traversal(options);\n\t\t},\n\t\tdijkstra(options) {\n\t\t\tthis.$refs.animation.dijkstra(options);\n\t\t},\n\t\tkruskal() {\n\t\t\tthis.$refs.animation.kruskal();\n\t\t},\n\t\tprim() {\n\t\t\tthis.$refs.animation.prim();\n\t\t},\n\t\tresetNodes() {\n\t\t\tthis.$refs.animation.resetNodes();\n\t\t}\n\t},\n}\n</script>\n\n<style>\nhtml, body {\n\tmargin: 0;\n\tpadding: 0;\n\theight: 100%;\n}\n#app {\n\tfont-family: 'Avenir', Helvetica, Arial, sans-serif;\n\t-webkit-font-smoothing: antialiased;\n\t-moz-osx-font-smoothing: grayscale;\n\ttext-align: center;\n\tcolor: #2c3e50;\n\tmargin: 0;\n\tpadding: 0;\n\theight: 100%;\n\toverflow: hidden;\n\tposition: relative;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/App.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('Animation',{ref:\"animation\",attrs:{\"handleMenu\":_vm.handleMenu}}),_c('Toolbar',{ref:\"toolbar\",attrs:{\"isShow\":_vm.isShow,\"handleMenu\":_vm.handleMenu,\"addNodeByParent\":_vm.addNode,\"deleteNodeByParent\":_vm.deleteNode,\"addEdgeByParent\":_vm.addEdge,\"deleteEdgeByParent\":_vm.deleteEdge,\"traversalByParent\":_vm.traversal,\"dijkstraByParent\":_vm.dijkstra,\"kruskalByParent\":_vm.kruskal,\"primByParent\":_vm.prim,\"resetNodes\":_vm.resetNodes}})],1)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-dacc4ab6\",\"hasScoped\":false,\"optionsId\":\"0\",\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/App.vue\n// module id = null\n// module chunks = ","function injectStyle (context) {\n  require(\"!!../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":false,\\\"minimize\\\":true}!../node_modules/vue-loader/lib/style-compiler/index?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"scoped\\\":false,\\\"sourceMap\\\":false}!../node_modules/vue-loader/lib/selector?type=styles&index=0!./App.vue\")\n}\n/* script */\nexport * from \"!!cache-loader?{\\\"cacheDirectory\\\":\\\"/Users/Mac/Github/graph-animation/v3/node_modules/.cache/cache-loader\\\"}!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\nimport __vue_script__ from \"!!cache-loader?{\\\"cacheDirectory\\\":\\\"/Users/Mac/Github/graph-animation/v3/node_modules/.cache/cache-loader\\\"}!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-dacc4ab6\\\",\\\"hasScoped\\\":false,\\\"optionsId\\\":\\\"0\\\",\\\"buble\\\":{\\\"transforms\\\":{}}}!../node_modules/vue-loader/lib/selector?type=template&index=0!./App.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/App.vue\n// module id = null\n// module chunks = ","import Vue from 'vue';\nimport App from './App.vue';\nimport Element from 'element-ui';\nimport 'element-ui/lib/theme-chalk/index.css';\nimport './main.css';\n\nVue.config.productionTip = false\n\nVue.use(Element, {\n  size: 'small',\n});\n\nnew Vue({\n  render: h => h(App),\n}).$mount('#app')\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.js","module.exports = [{\"source\":\"故宫\",\"target\":\"棋盘山\",\"dist\":11},{\"source\":\"故宫\",\"target\":\"实胜寺\",\"dist\":9},{\"source\":\"故宫\",\"target\":\"世博园\",\"dist\":5},{\"source\":\"故宫\",\"target\":\"北陵\",\"dist\":8},{\"source\":\"故宫\",\"target\":\"方特\",\"dist\":14},{\"source\":\"张氏帅府\",\"target\":\"世博园\",\"dist\":7},{\"source\":\"世博园\",\"target\":\"怪坡\",\"dist\":6},{\"source\":\"北陵\",\"target\":\"棋盘山\",\"dist\":7},{\"source\":\"方特\",\"target\":\"怪坡\",\"dist\":12},{\"source\":\"清福陵\",\"target\":\"博物馆\",\"dist\":10},{\"source\":\"清福陵\",\"target\":\"世博园\",\"dist\":4},{\"source\":\"实胜寺\",\"target\":\"方特\",\"dist\":6},{\"source\":\"张氏帅府\",\"target\":\"棋盘山\",\"dist\":17},{\"source\":\"张氏帅府\",\"target\":\"博物馆\",\"dist\":9}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/data/edges.json\n// module id = l1kv\n// module chunks = 1","module.exports = [{\"name\":\"故宫\",\"popularity\":8.8,\"desc\":\"沈阳故宫位于沈阳市沈河区，是中国现存完整的两座宫殿建筑群之一。后金入关前的皇宫，也是清朝迁都北京后的盛京行宫（也称奉天行宫）。沈阳故宫博物院不仅有精美的古代宫殿建筑，还以丰富的珍贵收藏而著称海内外，宫内收藏有大量旧皇宫遗留下来的宫廷文物，在宫中的各陈列馆可以观赏到这些珍贵的宝物。\",\"path\":\"Infinity\"},{\"name\":\"张氏帅府\",\"popularity\":9,\"desc\":\"张氏帅府位于沈阳市区，又称为“大帅府”，是原奉系军阀首领张作霖、爱国将领张学良父子的官邸和旧居。府前坐落着张学良将军身着戎装的雕像，正气威武。府内有雕梁画栋的四合院、恢宏的欧式洋楼、水榭亭台的花园，十分气派别致。帅府内主要分为两个部分：西边是一座中式的三进院落的四合院，是张作霖早期办公和生活的宅院，这里有着雕花的廊柱，庭院中栽植着古树，环境典雅而静谧。\",\"path\":\"Infinity\"},{\"name\":\"北陵\",\"popularity\":5,\"desc\":\"清昭陵也称为“北陵”，位于沈阳市区北部的北陵公园内，是公园内的主体景点。清昭陵是清朝第二代开国君主太宗皇太极与孝端文皇后博尔济吉特氏的陵墓，还葬着关睢宫宸妃、麟趾宫贵妃、洐庆宫淑妃等后妃佳丽。在清初的“关外三陵”（福陵、昭陵、永陵）中，昭陵是规模最大、气势最宏伟的一座，这里古松参天、楼殿威严，处处透着皇陵的气势，你还能在这些建筑中看到明朝皇陵和满族建筑特点的融合。\",\"path\":\"Infinity\"},{\"name\":\"博物馆\",\"popularity\":7,\"desc\":\"坐落于沈阳市区东北隅的“九·一八”历史博物馆是为纪念在“九·一八”事变中的受难同胞、警示国人勿忘国耻而建。馆内陈列着大量的史实照片、档案，还有各种侵华罪证物件、抗日烈士遗物等文物展品，从各个方面展示了侵华日军的史实罪证，以及沦陷区人民的苦难生活与不屈不挠的斗争事迹。这里是个很有意义的教育场所，很适合带孩子一起来学习历史、接受爱国主义思想的洗礼。\",\"path\":\"Infinity\"},{\"name\":\"世博园\",\"popularity\":7.6,\"desc\":\"沈阳世博园地处沈阳东郊，邻近清福陵与棋盘山风景区，曾是沈阳植物园，2006年成为世界园艺博览会的会址后扩建为世博园。园内绿树成林，到处是养眼的各色花卉，走在这里本身就是一种亲近大自然的享受，更是踏青、避暑与赏秋的好去处。世博园很大，全程步行游览大约要4个多小时，也可以乘坐观光车代步一些路程。\",\"path\":\"Infinity\"},{\"name\":\"棋盘山\",\"popularity\":8,\"desc\":\"棋盘山位于沈阳市区的东北部约30公里处，景区内山水相间，树木葱郁，合适季节还有荷花红叶可以观赏，自然风光十分优美。在棋盘山可以体验登山、野外CS、高山滑道等多种娱乐项目，也可以来此野餐休闲，度过悠闲周末，而每到冬天，这里的冰雪大世界更是赏冰雕、玩雪的乐园。另外，景区内还有关东影视城等人文景观可供观赏，内容十分丰富。\",\"path\":\"Infinity\"},{\"name\":\"清福陵\",\"popularity\":6.6,\"desc\":\"清福陵坐落在沈阳市东北郊，又称东陵，这里是清朝的奠基者太祖努尔哈赤与孝慈高皇后叶赫纳喇氏的陵墓。福陵始建于1629年，竣工于1651年，它背倚天柱山，草木茂盛，在这里既能感受到皇家陵园的气势，又能享受到清幽的自然环境。\",\"path\":\"Infinity\"},{\"name\":\"方特\",\"popularity\":9.2,\"desc\":\"沈阳方特欢乐世界位于沈阳市郊20公里外的盛京大街上，它是由飞越极限、星际航班、恐龙危机、影视特技摄影棚、生命之光、海螺湾、宇宙博览会、聊斋、宇宙小勇士、嘟比脱口秀、火流星、神秘河谷、维苏威火山、欢乐天地等十五个大型主题项目区组成，是东北地区规模比较大的主题公园。\",\"path\":\"Infinity\"},{\"name\":\"怪坡\",\"popularity\":5.5,\"desc\":\"怪坡风景区位于沈阳市沈北新区清水台镇境内帽山西麓，西邻102国道，设有南门和山门出入口。 怪坡是一条长约80米，宽约15米，呈西高东低走向的斜坡。怪坡的神奇之处在于：当汽车开到坡下熄火停车后，会发现汽车自动地向坡上滑行；骑上自行车感觉会更明显，上坡不用蹬，车会飞快地滑向坡顶，下坡却要用力蹬。\",\"path\":\"Infinity\"},{\"name\":\"实胜寺\",\"popularity\":6.2,\"desc\":\"实胜寺全称为“莲花净土实胜寺”，位于沈阳市区，是东北地区著名的藏传佛教寺院。实胜寺始建于1636年，是由清太宗皇太极赐建的皇家寺庙，所以又称为“皇寺”。如今这座寺庙身处繁华的闹市，尽管寺庙的规模已不如鼎盛时期，但香火仍然旺盛如初，步入其中仍可感受到皇家寺庙的威严与清净。\",\"path\":\"Infinity\"}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/data/nodes.json\n// module id = wnBg\n// module chunks = 1"],"sourceRoot":""}